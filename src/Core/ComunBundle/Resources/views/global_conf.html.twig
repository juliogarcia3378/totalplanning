<script>
    //Namespace para publciar funciones
//    ADEPUtils = {
//        contTags: 0
//    };
    var TipoInstancia = function(){
        return {
            CentroAdministracion:1,
            Oficialia:2,
            Juzgado:3
        }
    }();
    var GLOBAL = function () {
        return {
            loadingSpinner: "{{ asset('bundles/comun/assets/img/loading-spinner-grey.gif') }}"
        }
    }();
    var TOAST = function () {
        return {
            SUCCESS: {type:"success"},
            ERROR:{type:"error"}
        }
    }();
    $.fn.modal.Constructor.prototype.enforceFocus = function () {};
    jQuery.download = function(url, data,filters, form){
        //url and data options required
        if( url && data ){
            //data can be string of parameters or array/object
            data = typeof data == 'string' ? data : jQuery.param(data);
            //split params into form inputs
            var inputs = '';
            jQuery.each(data.split('&'), function(){
                var pair = this.split('=');
                inputs+='<input type="hidden" name="'+ pair[0] +'" value="'+ pair[1] +'" />';
            });
            filters = typeof filters == 'string' ? filters : jQuery.param(filters);
            //split params into form inputs
            jQuery.each(filters.split('&'), function(){
                var pair = this.split('=');
                inputs+='<input type="hidden" name="'+ pair[0] +'" value="'+ pair[1] +'" />';
            });
            //send request
            form.attr('action',url);
            var inputs = jQuery(inputs);
            inputs.appendTo(form);
            form[0].submit();
            inputs.remove();
//            jQuery('<form action="'+ url + '" target="' + (target||'_blank') + '"' + '" method="'+ (method||'post') +'">'+inputs+'</form>')
//                    .appendTo('body').submit().remove();
        };
    };
//    jQuery.download = function(url, data, method, target){
//        //url and data options required
//        if( url && data ){
//            //data can be string of parameters or array/object
//            data = typeof data == 'string' ? data : jQuery.param(data);
//            //split params into form inputs
//            var inputs = '';
//            jQuery.each(data.split('&'), function(){
//                var pair = this.split('=');
//                inputs+='<input type="hidden" name="'+ pair[0] +'" value="'+ pair[1] +'" />';
//            });
//           //send request
//            jQuery('<form action="'+ url + '" target="' + (target||'_blank') + '"' + '" method="'+ (method||'post') +'">'+inputs+'</form>')
//                    .appendTo('body').submit().remove();
//        };
//    };
    $(document).ajaxError(function (event, jqxhr, settings, exception) {
        var error = '';
//    console.log(event);
//    console.log(jqxhr);
//    console.log(settings);
//    console.log(exception);
        switch (jqxhr.status) {
            case 404:
            {
                error = 'Página no encontrada.';
            }
            case 403:
            {
                bootbox.alert({
                    size: 'small',
                    message: 'Acceso denegado.',
                    buttons: {
                        ok: {
                            label: "Aceptar",
                            className: "btn-success",
                            callback: function () {
                            }
                        }
                    }
                });
                return ;
            }
            case 400:
            {
                error = 'Sintaxis incorrecta en la petición.';
            }
            case 500:
            {
                error = 'El servidor notificó un error interno.';
            }
//            default:
//            {
//                error = exception;
//            }
        }
//        if (error != '') {
//            bootbox.alert({
//                size: 'small',
//                message: error,
//                buttons: {
//                    ok: {
//                        label: "Aceptar",
//                        className: "btn-success",
//                        callback: function () {
//                        }
//                    }
//                }
//            });
//        }
    });

//    ADEPUtils.Fecha = function () {
//        var objs = $(".date");
//        if (objs.length > 0) {
//            objs.datepicker({
//                format: 'dd/mm/yyyy',
//                autoclose: true,
//                todayHighlight: true,
//                language: "es"
//            });
//        }
//        $('input[type=datetime]').each(function (index, element) {
//            $(this).datepicker({
//                format: 'dd/mm/yyyy',
//                autoclose: true,
//                todayHighlight: true,
//                language: "es"
//            });
//        });
//    };
//    ADEPUtils.Hora = function () {
//        var objs = $(".time");
//        if (objs.length > 0) {
//            objs.timepicker({
//                "template": 'dropdown',
//                "minuteStep": 15,
//                "showSeconds": false,
//                "secondStep": 15,
//                "defaultTime": '08:00',
//                "showMeridian": false,
//                "showInputs": true,
//                "disableFocus": true,
//                "modalBackdrop": false
//            });
//        } else {
//            return null;
//        }
//    };
    var Mensajes = function()
    {
        return{
            Loading: "Cargando...",
            OpOK:"Operación realizada satisfactoriamente.",
            OpError:"Error al realizar la operación.",
            Seleccionar: "Seleccionar..."
        }
    }();
//    $(document).ready(function () {
//        jQuery.ajaxSetup({
//            // Abort all Ajax requests after 60 seconds
//            timeout: 60000,
//            // Defeat browser cache by adding a timestamp to URL
//            cache: false
//        });
//
//    }
    /**
     * Created by klin on 21/11/2014.
     */
    $(document).ready(function () {

        jQuery.validator.addMethod("alpha", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü0-9])*$/.test(value)
        }, jQuery.validator.messages.alpha);

        jQuery.validator.addMethod("letras", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü])*$/.test(value)
        }, jQuery.validator.messages.letras);

        jQuery.validator.addMethod("caracteresxpalabra", function (value, element) {
            var part = value.split('\n');
            for (i in part)
                if (part[i].length > 30) {
                    do {
                        part[i] = part[i].replace('_', ' ');
                    } while (part[i].indexOf('_') >= 0);

                    var part2 = part[i].split(' ');

                    for (var j = 0; j < part2.length; j++) {
                        if (part2[j].length > 30)
                            return false;
                    }
                }
            return true;
        }, jQuery.validator.messages.caracteresxpalabra);


        jQuery.validator.addMethod("matricula", function (value, element) {
            var flag = this.optional(element) || /^(([[A-Z]|Ñ]){3})(\d{3})$/.test(value);
            var flag2 = this.optional(element) || /^(([[A-Z]|Ñ]){1})(\d{6})$/.test(value);
            if (flag == true || flag2 == true) {
                return true;
            }
            return false;
        }, jQuery.validator.messages.matricula);


        jQuery.validator.addMethod("hora", function (value, element) {
            return this.optional(element) || /^(1|01|2|02|3|03|4|04|5|05|6|06|7|07|8|08|9|09|10|11|12)\:(([0-5]0)+|([0-5][1-9])+)$/.test(value);
        }, jQuery.validator.messages.hora);


        jQuery.validator.addMethod("fechamenor", function (value, element, param) {
            if (this.optional(element)) return "dependency-mismatch";
            if (($(param).length == 0 && $(param).val() != ''))
                return false;
            var date_u_split = $(param).val().split('/');
            var date_u = new Date(date_u_split[2], parseInt(date_u_split[1]) - 1, date_u_split[0]);
            var date_d_split = value.split('/');
            var date_d = new Date(date_d_split[2], parseInt(date_d_split[1]) - 1, date_d_split[0]);

            return date_u >= date_d;
        }, jQuery.validator.messages.fechamenor);



        jQuery.validator.addMethod("fechamayor", function (value, element, param) {
            if (this.optional(element)) return "dependency-mismatch";
            if ($(param).length == 0 && $(param).val() != '')
                return false;
            var date_u_split = value.split('/');
            var date_u = new Date(date_u_split[2], parseInt(date_u_split[1]) - 1, date_u_split[0]);
            var date_d_split = $(param).val().split('/');
            var date_d = new Date(date_d_split[2], parseInt(date_d_split[1]) - 1, date_d_split[0]);

            return date_u > date_d;
        }, jQuery.validator.messages.fechamayor);


// igual que email, pero TLD es opcional
        jQuery.validator.addMethod("email3", function (value, element, param) {
            return this.optional(element) || /^[a-zA-Z0-9]+([\.,_,-]{1}[a-zA-Z0-9]+)*@[a-zA-Z0-9]+(\.[a-zA-Z0-9]{2,4})+$/.test(value);
        }, jQuery.validator.messages.email);


        jQuery.validator.addMethod("telefono", function (phone_number, element) {
            return this.optional(element) || /^(0[1-9]{1,2}-)?[0-9]{2,3}-[0-9]{4}$/.test(value);
        }, jQuery.validator.messages.telefono);

        jQuery.validator.addMethod(
                "date",
                function (value, element) {
                    var check = false;
                    var re = /^\d{1,2}\/\d{1,2}\/\d{4}$/
                    if (re.test(value)) {
                        var adata = value.split('/');
                        var gg = parseInt(adata[0], 10);
                        var mm = parseInt(adata[1], 10);
                        var aaaa = parseInt(adata[2], 10);
                        var xdata = new Date(aaaa, mm - 1, gg);
                        if ((xdata.getFullYear() == aaaa) && (xdata.getMonth() == mm - 1) && (xdata.getDate() == gg))
                            check = true;
                        else
                            check = false;
                    } else
                        check = false;
                    return this.optional(element) || check;
                },
                jQuery.validator.messages.date
        );

        jQuery.validator.addMethod("carnetidentidad", function (value, element) {
            return this.optional(element) || /^(\d{11})$/.test(value);
        }, jQuery.validator.messages.carnetidentidad);

        jQuery.validator.addMethod("nombreapellidos", function (value, element) {
            return this.optional(element) || /^(([a-zA-ZÀ-ÖØ-öø-ÿ]+[-'´\s]?)*[a-zA-ZÀ-ÖØ-öø-ÿ])*$/i.test(value);
        }, jQuery.validator.messages.nombreapellidos);

        jQuery.validator.addMethod("nombre", function (value, element) {
            return this.optional(element) || /^(([a-zA-ZÀ-ÖØ-öø-ÿ]+[-'´\s]?)*[a-zA-ZÀ-ÖØ-öø-ÿ])*$/i.test(value);
        }, jQuery.validator.messages.nombre);

        jQuery.validator.addMethod("apellidos", function (value, element) {
            return this.optional(element) || /^(([a-zA-ZÀ-ÖØ-öø-ÿ]+[-'´\s]?)*[a-zA-ZÀ-ÖØ-öø-ÿ])*$/i.test(value);
        }, jQuery.validator.messages.apellidos);

        jQuery.validator.addMethod("codigoreup", function (value, element) {
            return this.optional(element) || /^((\d{3})[.](\d{1})[.](\d{5}))$/.test(value);
        }, jQuery.validator.messages.codigoreup);

        jQuery.validator.addMethod("mayusculas", function (value, element) {
            return this.optional(element) || /^([[A-Z]|Ñ])*$/.test(value);
        }, jQuery.validator.messages.mayusculas);

        jQuery.validator.addMethod("alphaseparadores", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+|[_\s-][A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+)*$/i.test(value);
        }, jQuery.validator.messages.alphaseparadores);

        jQuery.validator.addMethod("inicialetra", function (value, element) {
            return this.optional(element) || /^[A-Za-záéíóúÁÉÍÓÚÑñÑü](.)*$/i.test(value);
        }, jQuery.validator.messages.inicialetra);

        jQuery.validator.addMethod("nombreapellido2", function (value, element) {
            return this.optional(element) || /^[A-Za-záéíóúÁÉÍÓÚÑñÜüçÇ]+(([A-Za-záéíóúÁÉÍÓÚÑñÜüçÇ.-]|[ -'´]){1}[A-Za-záéíóúÁÉÍÓÚÑñÜüçÇ.]+)*$/i.test(value);
        }, jQuery.validator.messages.nombreapellido2);

        jQuery.validator.addMethod("maxpalabras", function (value, element, params) {
            return this.optional(element) || value.match(/\b\w+\b/g).length < params;
        }, jQuery.validator.messages.maxpalabras);

        jQuery.validator.addMethod("maxlength", function (value, element, params) {
            return this.optional(element) || value.length <= params;
        }, jQuery.validator.messages.maxlength);

        jQuery.validator.addMethod("minpalabras", function (value, element, params) {
            return this.optional(element) || value.match(/\b\w+\b/g).length >= params;
        }, jQuery.validator.messages.minpalabras);

        jQuery.validator.addMethod("max", function (value, element, params) {
            return this.optional(element) || parseInt(value) <= parseInt(params);
        }, jQuery.validator.messages.max);

        jQuery.validator.addMethod("min", function (value, element, params) {
            return this.optional(element) || parseInt(value) >= parseInt(params);
        }, jQuery.validator.messages.min);

        jQuery.validator.addMethod("rangopalabras", function (value, element, params) {
            return this.optional(element) || value.match(/\b\w+\b/g).length >= params[0] && value.match(/bw+b/g).length < params[1];
        }, jQuery.validator.messages.rangopalabras);

        jQuery.validator.addMethod("alphaespacios", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+|[ ][A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+)*$/i.test(value);
        }, jQuery.validator.messages.alphaespacios);

        jQuery.validator.addMethod("alphaseparadoresslash", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+|[_\s-\/][A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+)*$/i.test(value);
        }, jQuery.validator.messages.alphaseparadoresslash);

        jQuery.validator.addMethod("alphaseparadoresslashpunto", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+|[_\s-.\/][A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+)*$/i.test(value);
        }, jQuery.validator.messages.alphaseparadoresslashpunto);

        jQuery.validator.addMethod("alphaseparadorespunto", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+|[_\s-.][A-Za-záéíóúÁÉÍÓÚÑñÑü0-9]+)*$/i.test(value);
        }, jQuery.validator.messages.alphaseparadoresslashpunto);

        jQuery.validator.addMethod("letrasseparadores", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü]+|[_\s-][A-Za-záéíóúÁÉÍÓÚÑñÑü]+)*$/i.test(value);
        }, jQuery.validator.messages.letrasseparadores);

        jQuery.validator.addMethod("numerosseparadores", function (value, element) {
            return this.optional(element) || /^([0-9]+|[\s][0-9]+)*$/i.test(value);
        }, jQuery.validator.messages.numerosseparadores);

        jQuery.validator.addMethod("numerosespacios", function (value, element) {
            return this.optional(element) || /^([0-9]+|[_\s-][0-9]+)*$/i.test(value);
        }, jQuery.validator.messages.numerosespacios);

        jQuery.validator.addMethod("digits", function (value, element) {
            return this.optional(element) ||  /^([0-9])*$/i.test(value);
        }, jQuery.validator.messages.digits);

        jQuery.validator.addMethod("letrasespacios", function (value, element) {
            return this.optional(element) || /^([A-Za-záéíóúÁÉÍÓÚÑñÑü]+|[\s][A-Za-záéíóúÁÉÍÓÚÑñÑü]+)*$/i.test(value);
        }, jQuery.validator.messages.letrasespacios);

        jQuery.validator.addMethod("codigoentidad", function (value, element) {
            return this.optional(element) || /^(([0-9]{5})+|([0-9]{5})+[-]([0-9]{1,2})+)*$/i.test(value);
        }, jQuery.validator.messages.codigoentidad);


        /*
         * Modificar mensajes por defecto
         * by Aleli Sanchez Mendez
         * */
        jQuery.extend(jQuery.validator.messages, {
            "required": "Campo obligatorio.",
            "remote": "Corrija este campo.",
            "email": "Inserte una dirección de correo válida.",
            "url": "Inserte una URL válida.",
            "date": "Inserte una fecha válida.",
            "dateISO": "Inserte una fecha válida (ISO).",
            "number": "Sólo números enteros o de hasta 2 cifras decimales.",
            "digits": "Sólo números enteros.",
            "creditcard": "Inserte un número de tarjeta de crédito válido.",
            "equalTo": "Inserte el mismo valor nuevamente.",
            "alpha": "Sólo letras y números.",
            "letras": "Sólo letras.",
            "caracteresxpalabra": "Sólo 30 caracteres por palabras.",
            "matricula": "Inserte una matrícula válida.",
            "hora": "Inserte una hora válida.",
            "fechamenor": "La fecha debe ser menor.",
            "fechamayor": "La fecha debe ser mayor.",
            "email3": "Inserte una dirección de correo válida.",
            "telefono": "Formato: ###-####, ###-##-#### ó ##-###-####",
            "date": "Inserte una fecha válida.",
            "carnetidentidad": "Inserte 11 números consecutivos.",
            "nombreapellidos": "Inserte un nombre y apellidos válidos.",
            "nombre": "Inserte un nombre válido.",
            "apellidos": "Inserte apellidos válidos.",
            "codigoreup": "Formato: ###.#.#####",
            "mayusculas": "Sólo letras mayúsculas.",
            "alphaseparadores": "Sólo letras y números separados por espacio, guión(-) o guión bajo(_).",
            "inicialetra": "Debe iniciar con letra.",
            "nombreapellido2": "Inserte un nombre y apellidos válidos.",
            "maxpalabras": jQuery.validator.format("Inserte {0} palabras o menos."),
            "minpalabras": jQuery.validator.format("Inserte al menos {0} palabras."),
            "rangopalabras": jQuery.validator.format("Inserte entre {0} y {1} palabras."),
            "alphaespacios": "Sólo letras y números separados por espacio.",
            "alphaseparadoresslash": "Sólo letras y números separados por espacio, guión(-), guión bajo(_) o slash(/).",
            "alphaseparadoresslashpunto": "Sólo letras y números separados por punto, guión(-), guión bajo(_) o slash(/).",
            "letrasseparadores": "Sólo letras separadas por espacio, guión(-) o guión bajo(_).",
            "alphaseparadorespunto": "Sólo letras y números separados por punto, guión(-) ó guión bajo(_).",
            "numerosseparadores": "Sólo números separados por espacio, guión(-) o guión bajo(_).",
            "numerosespacios": "Sólo números separados por espacio.",
            "letrasespacios": "Sólo letras separadas por espacio.",
            "accept": "Inserte solamente ficheros .doc y .pdf.",
            "maxlength": jQuery.validator.format("Inserte hasta {0} caracteres."),
            "minlength": jQuery.validator.format("Inserte al menos {0} caracteres."),
            "rangelength": jQuery.validator.format("Inserte un valor con una longitud de caracteres entre {0} y {1}."),
            "range": jQuery.validator.format("Inserte un valor entre {0} y {1}."),
            "max": jQuery.validator.format("Inserte un valor menor o igual que {0}."),
            "min": jQuery.validator.format("Inserte un valor mayor o igual que {0}."),
            "codigoentidad":"Formato: #####, #####-# ó #####-##"
        });

});

    jQuery.validator.setDefaults({
            errorElement: 'span', //default input error message container
            errorClass: 'help-block text-right', // default input error message class
            focusInvalid: true, // do not focus the last invalid input
            focusout: true,
            keyup: true,
            trigger:['focusout'],
            invalidHandler: function (event, validator) { //display error alert on form submit

            },
            onfocusout: function(element) {
                this.element(element); //< inside 'validate()' method, this is like 'valid()'
            },
            highlight: function (element) { // hightlight error inputs
                $(element).closest('.form-group').addClass('has-error'); // set error class to the control group
            },
            unhighlight: function (element) { // revert the change done by hightlight
                $(element)
                        .closest('.form-group').removeClass('has-error'); // set error class to the control group
            },
            success: function (label) {
                label.closest('.form-group').removeClass('has-error');
                label.remove();
            },

            errorPlacement: function (error, element) {
                if (element.attr("name") == "tnc") { // insert checkbox errors after the container
                    error.insertAfter($('#register_tnc_error'));
                } else if (element.closest('.input-icon').size() === 1 && element.attr('srow') != '1') {
                    error.insertAfter(element.closest('.input-icon'));
                }else if (element.hasClass('timepicker')) {
                    error.insertAfter(element.closest('div'));
                }
                else {
                    error.insertAfter(element);
                }
            },

            submitHandler: function (form) {
                if(!$(form).hasClass('ajax_form'))
                    form.submit();
            }
    });


</script>